/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import java.awt.Color;
import javax.swing.JOptionPane;
import metodos.Utilidades;
import objetos.Lista;
import objetos.Nodo;

public class Ordenamiento extends javax.swing.JFrame {
    private int n, max, min;
    public static int numOp;
    private Lista original, lista;
    /**
     * Creates new form Ordenamiento
     */
    public Ordenamiento() {
        initComponents();
        setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.BLUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textN = new javax.swing.JTextField();
        textMax = new javax.swing.JTextField();
        textMin = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        botonGenerar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textOriginal = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        textProceso = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textOrdenada = new javax.swing.JTextArea();
        comboMetodo = new javax.swing.JComboBox();
        botonOrdenar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MÉTODOS DE ORDENAMIENTO");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        textN.setBackground(new java.awt.Color(102, 102, 102));
        textN.setForeground(new java.awt.Color(255, 255, 255));
        textN.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(textN, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 39, 95, -1));

        textMax.setBackground(new java.awt.Color(102, 102, 102));
        textMax.setForeground(new java.awt.Color(255, 255, 255));
        textMax.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(textMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(382, 42, 122, -1));

        textMin.setBackground(new java.awt.Color(102, 102, 102));
        textMin.setForeground(new java.awt.Color(255, 255, 255));
        textMin.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(textMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(382, 15, 122, -1));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Datos de entrada:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 12, -1, -1));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("n =");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 41, -1, -1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Rango:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 28, -1, -1));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("min =");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 17, -1, -1));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("max =");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 44, -1, -1));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Datos de salida:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 77, -1, -1));

        botonGenerar.setText("Generar Lista");
        botonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGenerarActionPerformed(evt);
            }
        });
        getContentPane().add(botonGenerar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, -1, -1));

        textOriginal.setEditable(false);
        textOriginal.setBackground(new java.awt.Color(102, 102, 102));
        textOriginal.setColumns(20);
        textOriginal.setForeground(new java.awt.Color(255, 255, 255));
        textOriginal.setRows(5);
        jScrollPane1.setViewportView(textOriginal);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 123, 803, -1));

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Lista original:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        textProceso.setEditable(false);
        textProceso.setBackground(new java.awt.Color(102, 102, 102));
        textProceso.setColumns(20);
        textProceso.setForeground(new java.awt.Color(255, 255, 255));
        textProceso.setRows(5);
        jScrollPane6.setViewportView(textProceso);

        getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 803, 221));

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Proceso de ordenamiento:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Lista ordenada:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, -1, -1));

        textOrdenada.setEditable(false);
        textOrdenada.setBackground(new java.awt.Color(102, 102, 102));
        textOrdenada.setColumns(20);
        textOrdenada.setForeground(new java.awt.Color(255, 255, 255));
        textOrdenada.setRows(5);
        jScrollPane2.setViewportView(textOrdenada);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 803, -1));

        comboMetodo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Inserción", "Burbuja", "Selección", "Shell", "Quicksort" }));
        getContentPane().add(comboMetodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 12, 139, -1));

        botonOrdenar.setText("Ordenar");
        botonOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOrdenarActionPerformed(evt);
            }
        });
        getContentPane().add(botonOrdenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 80, 139, -1));

        jLabel10.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 710, 70));
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGenerarActionPerformed
        textOriginal.setText("");
        textProceso.setText("");
        textOrdenada.setText("");
        try {
            original = new Lista();
            n = Integer.parseInt(textN.getText());
            min = Integer.parseInt(textMin.getText());
            max = Integer.parseInt(textMax.getText());
            if(min < max) {
                llenarLista(original);
                Utilidades.imprimirLista(original, textOriginal);
            } else JOptionPane.showMessageDialog(null, "El valor mínimo debe ser menor que el máximo","ERROR",0);
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, ex,"ERROR",0);
        }
    }//GEN-LAST:event_botonGenerarActionPerformed

    private void botonOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOrdenarActionPerformed
        textProceso.setText("");
        textOrdenada.setText("");
        try{
            numOp = 1;
            lista = copiarLista(original);
            Utilidades.imprimirLista(lista, textProceso);
            switch(comboMetodo.getSelectedIndex()){
                case 0:
                    metodos.Ordenamiento.insercion(lista, textProceso);
                    Utilidades.imprimirLista(lista, textOrdenada);
                    break;
                case 1:
                    metodos.Ordenamiento.burbula(lista, textProceso);
                    Utilidades.imprimirLista(lista, textOrdenada);
                    break;
                case 2:
                    metodos.Ordenamiento.seleccion(lista, textProceso);
                    Utilidades.imprimirLista(lista, textOrdenada);
                    break;
                case 3:
                    metodos.Ordenamiento.shell(lista, textProceso);
                    Utilidades.imprimirLista(lista, textOrdenada);
                    break;
                case 4:
                    metodos.Ordenamiento.quicksort(lista, 0, lista.tamaño()-1, textProceso);
                    Utilidades.imprimirLista(lista, textOrdenada);
                    break;
            }
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, ex,"ERROR",0);
        }
    }//GEN-LAST:event_botonOrdenarActionPerformed

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonGenerar;
    private javax.swing.JButton botonOrdenar;
    private javax.swing.JComboBox comboMetodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField textMax;
    private javax.swing.JTextField textMin;
    private javax.swing.JTextField textN;
    private javax.swing.JTextArea textOrdenada;
    private javax.swing.JTextArea textOriginal;
    private javax.swing.JTextArea textProceso;
    // End of variables declaration//GEN-END:variables

    private void llenarLista(Lista l) {
        int elemento;
        elemento = generarAleatorioEntre(min, max);
        l.insertarPrimero(elemento);
        for(int i = 0; i < n-1; i++){
            elemento = generarAleatorioEntre(min, max);
            l.insertarDespues(i, elemento);
        }
    }

    private int generarAleatorioEntre(int min, int max) {
        /*0<=x<1
         0*(max-min)<=x*(max-min)<max-min
         0<=x*(max-min)<max-min
         min<=x*(max-min)<max*/
        max++; // Para que el valor de max también pueda ser generado
        return (int)((Math.random()*(max-min))+min);
    }

    private Lista copiarLista(Lista l) {
        Nodo nodo = l.primero;
        int i = 0;
        Lista lis = new Lista();
        lis.insertarPrimero(l.primero.valor);
        nodo = nodo.siguiente;
        while(nodo != null) {
            lis.insertarDespues(i, nodo.valor);
            nodo = nodo.siguiente;
            i++;
        }
        return lis;
    }
}
