/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TablaClientes.java
 *
 * Created on 06/07/2011, 09:43:26 PM
 */

package interfazGraficaTablas;

import excepciones.FachadaException;
import fachadas.ListadoUnidades;
import interfazGraficaAgregar.AgregarRutas;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import objetoProyecto.Unidad;

/**
 *
 * @author Gustavo
 */
public class TablaUnidades extends javax.swing.JFrame {
private ListadoUnidades listaUnidades = new ListadoUnidades();
    
    /** Creates new form TablaClientes */
    public TablaUnidades() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private class MyTableModel extends AbstractTableModel {

        private boolean DEBUG = true;
        private String[] columnNames = {"Codigo",
            "Matricula","Capacidad","Chofer","Ayudante","Asientos disponibles"
        };
        private Object[][] data = null;

        public MyTableModel(Object[][] data1) {
            this.data = data1;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public boolean isCellEditable(int fila, int col) {
            return true;
        }

        public int getRowCount() {
            return data.length;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data[row][col];
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aceptar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUnidades = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        listarTodos = new javax.swing.JButton();
        buscaCodigo = new javax.swing.JButton();
        buscaMatricula = new javax.swing.JButton();
        buscaCapacidad = new javax.swing.JButton();
        buscaChofer = new javax.swing.JButton();
        buscaAyudante = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cooperativa");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        aceptar.setText("ACEPTAR");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        tablaUnidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Matricula", "Capacidad", "Chofer", "Ayudante", "Asientos disponibles"
            }
        ));
        tablaUnidades.setEnabled(false);
        tablaUnidades.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaUnidades);

        jLabel1.setText("CONSULTA UNIDADES");

        listarTodos.setText("LISTAR TODOS");
        listarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarTodosActionPerformed(evt);
            }
        });

        buscaCodigo.setText("POR CÓDIGO");
        buscaCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaCodigoActionPerformed(evt);
            }
        });

        buscaMatricula.setText("POR MATRICULA");
        buscaMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaMatriculaActionPerformed(evt);
            }
        });

        buscaCapacidad.setText("POR CAPACIDAD");
        buscaCapacidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaCapacidadActionPerformed(evt);
            }
        });

        buscaChofer.setText("POR CHOFER");
        buscaChofer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaChoferActionPerformed(evt);
            }
        });

        buscaAyudante.setText("POR AYUDANTE");
        buscaAyudante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaAyudanteActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(316, Short.MAX_VALUE)
                .addComponent(aceptar)
                .addGap(352, 352, 352))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(buscaCodigo)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buscaMatricula)
                        .addGap(18, 18, 18)
                        .addComponent(buscaCapacidad)
                        .addGap(18, 18, 18)
                        .addComponent(buscaChofer)
                        .addGap(18, 18, 18)
                        .addComponent(buscaAyudante))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(listarTodos)
                            .addComponent(jLabel1))))
                .addContainerGap(131, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(listarTodos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buscaMatricula)
                    .addComponent(buscaCapacidad)
                    .addComponent(buscaChofer)
                    .addComponent(buscaAyudante)
                    .addComponent(buscaCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aceptar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        // TODO add your handling code here:
        AgregarRutas me=new AgregarRutas();
        dispose();
        me.setVisible(true);
    }//GEN-LAST:event_aceptarActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formComponentShown

    private void listarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarTodosActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        try {
            lista = listaUnidades.consultaUnidades();
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][6];
        this.tablaUnidades.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Unidad c = (Unidad) lista.get(i);
            tabla[i][0] = c.getCodigoUnidad();
            tabla[i][1] = c.getMatricula();
            tabla[i][2] = c.getCapacidadUnidad();
            tabla[i][3] = c.getChofer();
            tabla[i][4] = c.getAyudante();
            tabla[i][5] = c.getDisponibles();
        }
        this.tablaUnidades.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron unidades");
 }
        
    }//GEN-LAST:event_listarTodosActionPerformed

    private void buscaCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaCodigoActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese el código de la unidad a buscar");
                try {
            lista = listaUnidades.consultaCodigoUnidad(busca);
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
          Object[][] tabla = new Object[lista.size()][6];
        this.tablaUnidades.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Unidad c = (Unidad) lista.get(i);
            tabla[i][0] = c.getCodigoUnidad();
            tabla[i][1] = c.getMatricula();
            tabla[i][2] = c.getCapacidadUnidad();
            tabla[i][3] = c.getChofer();
            tabla[i][4] = c.getAyudante();
            tabla[i][5] = c.getDisponibles();
        }
        this.tablaUnidades.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron unidades");
 }
        
    }//GEN-LAST:event_buscaCodigoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void buscaMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaMatriculaActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese la matricula de la unidad a buscar");
                try {
            lista = listaUnidades.consultaMatricula(busca);
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
          Object[][] tabla = new Object[lista.size()][6];
        this.tablaUnidades.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Unidad c = (Unidad) lista.get(i);
            tabla[i][0] = c.getCodigoUnidad();
            tabla[i][1] = c.getMatricula();
            tabla[i][2] = c.getCapacidadUnidad();
            tabla[i][3] = c.getChofer();
            tabla[i][4] = c.getAyudante();
            tabla[i][5] = c.getDisponibles();
            }
        this.tablaUnidades.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron unidades");
 }
        
    }//GEN-LAST:event_buscaMatriculaActionPerformed

    private void buscaCapacidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaCapacidadActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese la capacidad de la unidad a buscar");
                try {
            lista = listaUnidades.consultaCapacidadUnidad(Integer.parseInt(busca));
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
          Object[][] tabla = new Object[lista.size()][6];
        this.tablaUnidades.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Unidad c = (Unidad) lista.get(i);
            tabla[i][0] = c.getCodigoUnidad();
            tabla[i][1] = c.getMatricula();
            tabla[i][2] = c.getCapacidadUnidad();
            tabla[i][3] = c.getChofer();
            tabla[i][4] = c.getAyudante();
            tabla[i][5] = c.getDisponibles();
            }
        this.tablaUnidades.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron unidades");
 }
        
    }//GEN-LAST:event_buscaCapacidadActionPerformed

    private void buscaChoferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaChoferActionPerformed
        // TODO add your handling code here:
                Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese el chofer de la unidad a buscar");
                try {
            lista = listaUnidades.consultaChofer(busca);
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
          Object[][] tabla = new Object[lista.size()][6];
        this.tablaUnidades.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Unidad c = (Unidad) lista.get(i);
            tabla[i][0] = c.getCodigoUnidad();
            tabla[i][1] = c.getMatricula();
            tabla[i][2] = c.getCapacidadUnidad();
            tabla[i][3] = c.getChofer();
            tabla[i][4] = c.getAyudante();
            tabla[i][5] = c.getDisponibles();
            }
        this.tablaUnidades.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron unidades");
 }
        
    }//GEN-LAST:event_buscaChoferActionPerformed

    private void buscaAyudanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaAyudanteActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese el ayudante de la unidad a buscar");
                try {
            lista = listaUnidades.consultaAyudante(busca);
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
          Object[][] tabla = new Object[lista.size()][6];
        this.tablaUnidades.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Unidad c = (Unidad) lista.get(i);
            tabla[i][0] = c.getCodigoUnidad();
            tabla[i][1] = c.getMatricula();
            tabla[i][2] = c.getCapacidadUnidad();
            tabla[i][3] = c.getChofer();
            tabla[i][4] = c.getAyudante();
            tabla[i][5] = c.getDisponibles();
            }
        this.tablaUnidades.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron unidades");
 }
        
    }//GEN-LAST:event_buscaAyudanteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptar;
    private javax.swing.JButton buscaAyudante;
    private javax.swing.JButton buscaCapacidad;
    private javax.swing.JButton buscaChofer;
    private javax.swing.JButton buscaCodigo;
    private javax.swing.JButton buscaMatricula;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listarTodos;
    private javax.swing.JTable tablaUnidades;
    // End of variables declaration//GEN-END:variables

}
