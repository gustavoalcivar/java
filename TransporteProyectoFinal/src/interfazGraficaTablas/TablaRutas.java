/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TablaClientes.java
 *
 * Created on 06/07/2011, 09:43:26 PM
 */

package interfazGraficaTablas;

import excepciones.FachadaException;
import fachadas.ListadoRutas;
import interfazGrafica.Menu;
import java.util.Vector;
import javax.swing.JOptionPane;
import objetoProyecto.Ruta;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Gustavo
 */
public class TablaRutas extends javax.swing.JFrame {
private ListadoRutas listaRutas = new ListadoRutas();
    
    /** Creates new form TablaClientes */
    public TablaRutas() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private class MyTableModel extends AbstractTableModel {

        private boolean DEBUG = true;
        private String[] columnNames = {"Codigo",
            "Salida",
            "Destino",
            "Tiempo",
            "Precio",
            "Hora","Distancia","Unidad","Fecha"
        };
        private Object[][] data = null;

        public MyTableModel(Object[][] data1) {
            this.data = data1;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public boolean isCellEditable(int fila, int col) {
            return true;
        }

        public int getRowCount() {
            return data.length;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data[row][col];
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aceptar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRutas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        listarTodos = new javax.swing.JButton();
        buscaCodigo = new javax.swing.JButton();
        buscaSalida = new javax.swing.JButton();
        buscaDestino = new javax.swing.JButton();
        buscaTiempo = new javax.swing.JButton();
        buscaPrecio = new javax.swing.JButton();
        buscaDistancia = new javax.swing.JButton();
        buscaUnidad = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cooperativa");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        aceptar.setText("ACEPTAR");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        tablaRutas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Salida", "Destino", "Tiempo", "Precio", "Hora", "Distancia", "Unidad", "Fecha"
            }
        ));
        tablaRutas.setEnabled(false);
        tablaRutas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaRutas);

        jLabel1.setText("CONSULTA RUTAS");

        listarTodos.setText("LISTAR TODOS");
        listarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarTodosActionPerformed(evt);
            }
        });

        buscaCodigo.setText("POR CÓDIGO");
        buscaCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaCodigoActionPerformed(evt);
            }
        });

        buscaSalida.setText("POR SALIDA");
        buscaSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaSalidaActionPerformed(evt);
            }
        });

        buscaDestino.setText("POR DESTINO");
        buscaDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaDestinoActionPerformed(evt);
            }
        });

        buscaTiempo.setText("POR TIEMPO");
        buscaTiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaTiempoActionPerformed(evt);
            }
        });

        buscaPrecio.setText("POR PRECIO");
        buscaPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaPrecioActionPerformed(evt);
            }
        });

        buscaDistancia.setText("POR DISTANCIA");
        buscaDistancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaDistanciaActionPerformed(evt);
            }
        });

        buscaUnidad.setText("POR UNIDAD");
        buscaUnidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaUnidadActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(422, 422, 422)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(listarTodos))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(buscaCodigo)
                        .addGap(18, 18, 18)
                        .addComponent(buscaSalida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscaDestino)
                        .addGap(18, 18, 18)
                        .addComponent(buscaTiempo)
                        .addGap(18, 18, 18)
                        .addComponent(buscaPrecio)
                        .addGap(18, 18, 18)
                        .addComponent(buscaDistancia)
                        .addGap(18, 18, 18)
                        .addComponent(buscaUnidad))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(454, 454, 454)
                        .addComponent(aceptar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1004, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addComponent(listarTodos)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buscaDistancia)
                    .addComponent(buscaUnidad)
                    .addComponent(buscaPrecio)
                    .addComponent(buscaTiempo)
                    .addComponent(buscaDestino)
                    .addComponent(buscaSalida)
                    .addComponent(buscaCodigo))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(aceptar))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        // TODO add your handling code here:
        Menu me=new Menu();
        dispose();
        me.setVisible(true);
    }//GEN-LAST:event_aceptarActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formComponentShown

    private void listarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarTodosActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        try {
            lista = listaRutas.consultaRutas();
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][9];
        this.tablaRutas.removeAll();

        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Ruta c = (Ruta) lista.get(i);
            tabla[i][0] = c.getCodigoRuta();
            tabla[i][1] = c.getLugarSalida();
            tabla[i][2] = c.getLugarLlegada();
            tabla[i][3] = c.getTiempoAproximado();
            tabla[i][4] = c.getCostoRuta();
            tabla[i][5] = c.getHora();
            tabla[i][6] = c.getDistancia();
            tabla[i][7] = c.getUnidad();
            tabla[i][8] = c.getFecha();
        }
        this.tablaRutas.setModel(new MyTableModel(tabla));
        }
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron rutas");
 }
    }//GEN-LAST:event_listarTodosActionPerformed

    private void buscaCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaCodigoActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese el código de la ruta a buscar");
                try {
            lista = listaRutas.consultaCodigoRuta(busca);
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][9];
        this.tablaRutas.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Ruta c = (Ruta) lista.get(i);
            tabla[i][0] = c.getCodigoRuta();
            tabla[i][1] = c.getLugarSalida();
            tabla[i][2] = c.getLugarLlegada();
            tabla[i][3] = c.getTiempoAproximado();
            tabla[i][4] = c.getCostoRuta();
            tabla[i][5] = c.getHora();
            tabla[i][6] = c.getDistancia();
            tabla[i][7] = c.getUnidad();
            tabla[i][8] = c.getFecha();
        }
        this.tablaRutas.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron rutas");
 }
        
        
    }//GEN-LAST:event_buscaCodigoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void buscaSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaSalidaActionPerformed
        // TODO add your handling code here:
       Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese la ubicación de salida de la ruta a buscar");
                try {
            lista = listaRutas.consultaLugarSalida(busca);
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][9];
        this.tablaRutas.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Ruta c = (Ruta) lista.get(i);
            tabla[i][0] = c.getCodigoRuta();
            tabla[i][1] = c.getLugarSalida();
            tabla[i][2] = c.getLugarLlegada();
            tabla[i][3] = c.getTiempoAproximado();
            tabla[i][4] = c.getCostoRuta();
            tabla[i][5] = c.getHora();
            tabla[i][6] = c.getDistancia();
            tabla[i][7] = c.getUnidad();
            tabla[i][8] = c.getFecha();
        }
        this.tablaRutas.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron rutas");
 }
        
        
    }//GEN-LAST:event_buscaSalidaActionPerformed

    private void buscaDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaDestinoActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese el destino de la ruta a buscar");
                try {
            lista = listaRutas.consultaLugarLlegada(busca);
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][9];
        this.tablaRutas.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Ruta c = (Ruta) lista.get(i);
            tabla[i][0] = c.getCodigoRuta();
            tabla[i][1] = c.getLugarSalida();
            tabla[i][2] = c.getLugarLlegada();
            tabla[i][3] = c.getTiempoAproximado();
            tabla[i][4] = c.getCostoRuta();
            tabla[i][5] = c.getHora();
            tabla[i][6] = c.getDistancia();
            tabla[i][7] = c.getUnidad();
            tabla[i][8] = c.getFecha();
        }
        this.tablaRutas.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron rutas");
 }
        
        
        
    }//GEN-LAST:event_buscaDestinoActionPerformed

    private void buscaTiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaTiempoActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese el tiempo aproximado de la ruta a buscar");
                try {
            lista = listaRutas.consultaTiampoAproximado(Float.parseFloat(busca));
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][9];
        this.tablaRutas.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Ruta c = (Ruta) lista.get(i);
            tabla[i][0] = c.getCodigoRuta();
            tabla[i][1] = c.getLugarSalida();
            tabla[i][2] = c.getLugarLlegada();
            tabla[i][3] = c.getTiempoAproximado();
            tabla[i][4] = c.getCostoRuta();
            tabla[i][5] = c.getHora();
            tabla[i][6] = c.getDistancia();
            tabla[i][7] = c.getUnidad();
            tabla[i][8] = c.getFecha();
        }
        this.tablaRutas.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron rutas");
 }
             
    }//GEN-LAST:event_buscaTiempoActionPerformed

    private void buscaPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaPrecioActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese el precio de la ruta a buscar");
                try {
            lista = listaRutas.consultaCostoRuta(Float.parseFloat(busca));
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][9];
        this.tablaRutas.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Ruta c = (Ruta) lista.get(i);
            tabla[i][0] = c.getCodigoRuta();
            tabla[i][1] = c.getLugarSalida();
            tabla[i][2] = c.getLugarLlegada();
            tabla[i][3] = c.getTiempoAproximado();
            tabla[i][4] = c.getCostoRuta();
            tabla[i][5] = c.getHora();
            tabla[i][6] = c.getDistancia();
            tabla[i][7] = c.getUnidad();
            tabla[i][8] = c.getFecha();
        }
        this.tablaRutas.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron rutas");
 }
        
        
    }//GEN-LAST:event_buscaPrecioActionPerformed

    private void buscaDistanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaDistanciaActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese la distancia de la ruta a buscar");
                try {
            lista = listaRutas.consultaDistancia(Float.parseFloat(busca));
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][9];
        this.tablaRutas.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Ruta c = (Ruta) lista.get(i);
            tabla[i][0] = c.getCodigoRuta();
            tabla[i][1] = c.getLugarSalida();
            tabla[i][2] = c.getLugarLlegada();
            tabla[i][3] = c.getTiempoAproximado();
            tabla[i][4] = c.getCostoRuta();
            tabla[i][5] = c.getHora();
            tabla[i][6] = c.getDistancia();
            tabla[i][7] = c.getUnidad();
            tabla[i][8] = c.getFecha();
        }
        this.tablaRutas.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron rutas");
 }
        
        
    }//GEN-LAST:event_buscaDistanciaActionPerformed

    private void buscaUnidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaUnidadActionPerformed
        // TODO add your handling code here:
        Vector lista = new Vector();
        String busca=JOptionPane.showInputDialog("Ingrese la unidad de la ruta a buscar");
                try {
            lista = listaRutas.consultaUnidadRuta(busca);
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null,"Error: " + fe.getMessage());
        }
        Object[][] tabla = new Object[lista.size()][9];
        this.tablaRutas.removeAll();
        if(!lista.isEmpty()){
        for (int i = 0; i < lista.size(); i++) {
            Ruta c = (Ruta) lista.get(i);
            tabla[i][0] = c.getCodigoRuta();
            tabla[i][1] = c.getLugarSalida();
            tabla[i][2] = c.getLugarLlegada();
            tabla[i][3] = c.getTiempoAproximado();
            tabla[i][4] = c.getCostoRuta();
            tabla[i][5] = c.getHora();
            tabla[i][6] = c.getDistancia();
            tabla[i][7] = c.getUnidad();
            tabla[i][8] = c.getFecha();
        }
        this.tablaRutas.setModel(new MyTableModel(tabla));
	}
 else{
            JOptionPane.showMessageDialog(null, "No se encontraron rutas");
 }
        
    }//GEN-LAST:event_buscaUnidadActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptar;
    private javax.swing.JButton buscaCodigo;
    private javax.swing.JButton buscaDestino;
    private javax.swing.JButton buscaDistancia;
    private javax.swing.JButton buscaPrecio;
    private javax.swing.JButton buscaSalida;
    private javax.swing.JButton buscaTiempo;
    private javax.swing.JButton buscaUnidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listarTodos;
    private javax.swing.JTable tablaRutas;
    // End of variables declaration//GEN-END:variables

}
