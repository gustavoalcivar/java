/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AgregarBoletos.java
 *
 * Created on 07/07/2011, 04:19:45 PM
 */
package interfazGraficaAgregar;

import excepciones.FachadaException;
import fachadas.ListadoAsientos;
import fachadas.ListadoBoletos;
import fachadas.ListadoClientes;
import fachadas.ListadoRutas;
import fachadas.ListadoUnidades;
import interfaces.IFachadaAsiento;
import interfaces.IFachadaBoleto;
import interfazGrafica.Menu;
import java.util.Vector;
import javax.swing.JOptionPane;
import objetoProyecto.Asiento;
import objetoProyecto.Boleto;
import objetoProyecto.Cliente;
import objetoProyecto.Ruta;
import objetoProyecto.Unidad;
import objetoServicio.NumeroInt;

/**
 *
 * @author Gustavo
 */
public class AgregarBoletos extends javax.swing.JFrame {

    /**
     * Creates new form AgregarBoletos
     */
    public AgregarBoletos() {
        initComponents();
        setLocationRelativeTo(null);
    }
    private ListadoClientes listaClientes = new ListadoClientes();
    private ListadoRutas listaRutas = new ListadoRutas();
    private ListadoUnidades listaUnidades = new ListadoUnidades();
    private ListadoAsientos listaAsientos = new ListadoAsientos();
    private Unidad buscado;
    private Unidad buscado2;
    private float costoUnidad;
    private String nomCli;
    private String apeCli;
    private String cedCli;
    private String rut;
    private String codRut;
    private int capUnidad;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        codigo = new javax.swing.JTextField();
        cancelar = new javax.swing.JButton();
        aceptar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ruta = new javax.swing.JComboBox();
        cliente = new javax.swing.JComboBox();
        unidad = new javax.swing.JLabel();
        fechaViaje = new javax.swing.JLabel();
        horaViaje = new javax.swing.JLabel();
        detalleAsientosEspeciales = new javax.swing.JLabel();
        asientosEspeciales = new javax.swing.JLabel();
        costoTotal = new javax.swing.JLabel();
        agregarAsientoEspecial = new javax.swing.JButton();
        agregarAsientoNormal = new javax.swing.JButton();
        asientosNormales = new javax.swing.JLabel();
        detalleAsientosNormales = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cantADisponibles = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        numANormal = new javax.swing.JTextField();
        numAEspecial = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cooperativa");
        setMinimumSize(new java.awt.Dimension(630, 413));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("BOLETO");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        jLabel2.setText("CÃ³digo:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel3.setText("Cliente:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        jLabel5.setText("Unidad:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        jLabel6.setText("Hora del viaje:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        jLabel7.setText("Asientos normales:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        jLabel8.setText("Asientos especiales:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        jLabel9.setText("Costo total:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));
        getContentPane().add(codigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 90, -1));

        cancelar.setText("CANCELAR");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        getContentPane().add(cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 370, -1, -1));

        aceptar.setText("ACEPTAR");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });
        getContentPane().add(aceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, -1, -1));

        jLabel13.setText("Fecha del viaje:");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 188, -1, -1));

        jLabel10.setText("Ruta:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        ruta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rutaMouseClicked(evt);
            }
        });
        ruta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rutaItemStateChanged(evt);
            }
        });
        getContentPane().add(ruta, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 310, -1));

        cliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                clienteItemStateChanged(evt);
            }
        });
        getContentPane().add(cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 310, -1));

        unidad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(unidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, 70, 20));

        fechaViaje.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(fechaViaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 140, 20));

        horaViaje.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(horaViaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, 140, 20));

        detalleAsientosEspeciales.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(detalleAsientosEspeciales, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 290, 220, 20));

        asientosEspeciales.setText("0");
        asientosEspeciales.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(asientosEspeciales, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 90, 20));

        costoTotal.setText("0");
        costoTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(costoTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, 90, 20));

        agregarAsientoEspecial.setText("AGREGAR");
        agregarAsientoEspecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarAsientoEspecialActionPerformed(evt);
            }
        });
        getContentPane().add(agregarAsientoEspecial, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 290, -1, -1));

        agregarAsientoNormal.setText("AGREGAR");
        agregarAsientoNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarAsientoNormalActionPerformed(evt);
            }
        });
        getContentPane().add(agregarAsientoNormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 260, -1, -1));

        asientosNormales.setText("0");
        asientosNormales.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(asientosNormales, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 90, 20));

        detalleAsientosNormales.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(detalleAsientosNormales, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 260, 220, 20));

        jLabel4.setText("Cantidad de asientos disponibles:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 220, -1));

        cantADisponibles.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(cantADisponibles, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 160, 70, 20));

        jLabel11.setText("Detalle");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 240, -1, -1));

        numANormal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numANormalKeyTyped(evt);
            }
        });
        getContentPane().add(numANormal, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 260, 40, -1));

        numAEspecial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numAEspecialKeyTyped(evt);
            }
        });
        getContentPane().add(numAEspecial, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, 40, -1));

        jLabel12.setText("NÃºmero del asiento a comprar");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 240, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        // TODO add your handling code here:
        if (detalleAsientosNormales.getText().equals("") && detalleAsientosEspeciales.getText().equals("")) {
            Menu me = new Menu();
            dispose();
            me.setVisible(true);
        } else {
            int b;
            b = Integer.parseInt(asientosNormales.getText()) + Integer.parseInt(asientosEspeciales.getText());
            buscado.setDisponibles(buscado.getDisponibles() + b);
            try {
                listaUnidades.actualiza(buscado);
            } catch (FachadaException fe) {
                JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
            }
            Vector lista = new Vector();
            try {
                lista = listaAsientos.consultaAsientoCodBoleto(codigo.getText());
            } catch (FachadaException fe) {
                JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
            }
            for (int i = 0; i < lista.size(); i++) {
                try {
                    Asiento a = (Asiento) lista.get(i);
                    listaAsientos.elimina(a);
                } catch (FachadaException fe) {
                    JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
                }
            }
            Menu me = new Menu();
            dispose();
            me.setVisible(true);
        }
    }//GEN-LAST:event_cancelarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

        Vector lista = new Vector();
        try {
            lista = listaClientes.consultaCliente();
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
        }
        if (!lista.isEmpty()) {
            for (int i = 0; i < lista.size(); i++) {
                Cliente c = (Cliente) lista.get(i);
                cliente.addItem(c.getCodigoCliente() + " " + c.getApellidos() + " " + c.getNombres());
            }
            Cliente a = (Cliente) lista.get(0);
            nomCli = a.getNombres();
            apeCli = a.getApellidos();
            cedCli = a.getCedula();
        } else {
            JOptionPane.showMessageDialog(null, "Error: No existen clientes guardados");
            Menu me = new Menu();
            dispose();
            me.setVisible(true);
        }
        Vector lista2 = new Vector();
        try {
            lista2 = listaRutas.consultaRutas();
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
        }
        if (!lista2.isEmpty()) {
            for (int i = 0; i < lista2.size(); i++) {
                Ruta c = (Ruta) lista2.get(i);
                ruta.addItem(c.getLugarSalida() + "-" + c.getLugarLlegada() + "-" + c.getFecha() + "-" + String.valueOf(c.getHora()));
            }
            Ruta a = (Ruta) lista2.get(0);
            unidad.setText(a.getUnidad());
            fechaViaje.setText(String.valueOf(a.getFecha().getDia()) + "/"
                    + String.valueOf(a.getFecha().getMes()) + "/"
                    + String.valueOf(a.getFecha().getAÃ±o()));
            horaViaje.setText(String.valueOf(a.getHora()));
            costoUnidad = a.getCostoRuta();
            rut = a.getLugarSalida() + "-" + a.getLugarLlegada();
            codRut = a.getCodigoRuta();
            Unidad unidadSeleccionada = new Unidad();
            unidadSeleccionada.setCodigoUnidad(unidad.getText());
            try {
                buscado2 = listaUnidades.obten(unidadSeleccionada);
                cantADisponibles.setText(String.valueOf(buscado2.getDisponibles()));
            } catch (FachadaException fe) {
                JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
            }
            capUnidad = buscado2.getCapacidadUnidad();
        } else {
            JOptionPane.showMessageDialog(null, "Error: No existen rutas guardadas");
            Menu me = new Menu();
            dispose();
            me.setVisible(true);
        }

    }//GEN-LAST:event_formWindowOpened

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        // TODO add your handling code here:
        if ((detalleAsientosNormales.getText().equals("") && detalleAsientosEspeciales.getText().equals(""))) {
            JOptionPane.showMessageDialog(null, "Error: Debe comprar por lo menos un asiento");
        } else {
            Boleto boleto = new Boleto();
            boleto.setApellidoCliente(apeCli);
            boleto.setNombreCliente(nomCli);
            boleto.setCedulaCliente(cedCli);
            boleto.setCodigoBoleto(codigo.getText());
            boleto.setCostoTotal(Float.parseFloat(costoTotal.getText()));
            boleto.setDetalleAsientosEspeciales(detalleAsientosEspeciales.getText());
            boleto.setDetalleAsientosNormales(detalleAsientosNormales.getText());
            boleto.setFecha(fechaViaje.getText());
            boleto.setNumAsientosEspeciales(Integer.parseInt(asientosEspeciales.getText()));
            boleto.setNumAsientosNormales(Integer.parseInt(asientosNormales.getText()));
            boleto.setRuta(rut);
            boleto.setCodRuta(codRut);
            boleto.setUnidad(unidad.getText());
            boleto.setHora(Float.parseFloat(horaViaje.getText()));

            IFachadaBoleto boletos = new ListadoBoletos();

            try {
                boletos.agrega(boleto);
                JOptionPane.showMessageDialog(null, "Boleto vendido");
                Menu bo = new Menu();
                dispose();
                bo.setVisible(true);
            } catch (FachadaException fe) {
                JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
                codigo.setEnabled(true);
            }
        }
    }//GEN-LAST:event_aceptarActionPerformed

    private void rutaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rutaItemStateChanged
        // TODO add your handling code here:
        Vector lista2 = new Vector();
        try {
            lista2 = listaRutas.consultaRutas();
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
        }

        Ruta a = (Ruta) lista2.get(ruta.getSelectedIndex());
        unidad.setText(a.getUnidad());
        fechaViaje.setText(String.valueOf(a.getFecha().getDia()) + "/"
                + String.valueOf(a.getFecha().getMes()) + "/"
                + String.valueOf(a.getFecha().getAÃ±o()));
        horaViaje.setText(String.valueOf(a.getHora()));
        costoUnidad = a.getCostoRuta();
        rut = a.getLugarSalida() + "-" + a.getLugarLlegada();
        codRut = a.getCodigoRuta();
        Unidad unidadSeleccionada = new Unidad();
        unidadSeleccionada.setCodigoUnidad(unidad.getText());
        try {
            buscado2 = listaUnidades.obten(unidadSeleccionada);
            cantADisponibles.setText(String.valueOf(buscado2.getDisponibles()));
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
        }
        capUnidad = buscado2.getCapacidadUnidad();
}//GEN-LAST:event_rutaItemStateChanged

    private void rutaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rutaMouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_rutaMouseClicked

    private void clienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_clienteItemStateChanged
        // TODO add your handling code here:
        Vector lista = new Vector();
        try {
            lista = listaClientes.consultaCliente();
        } catch (FachadaException fe) {
            JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
        }
        Cliente b = (Cliente) lista.get(cliente.getSelectedIndex());
        nomCli = b.getNombres();
        apeCli = b.getApellidos();
        cedCli = b.getCedula();
}//GEN-LAST:event_clienteItemStateChanged

    private void agregarAsientoEspecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarAsientoEspecialActionPerformed
        // TODO add your handling code here:
        if (!codigo.getText().equals("")) {
            if (!numAEspecial.getText().equals("")) {
                if (Integer.parseInt(numAEspecial.getText()) <= capUnidad) {
                    Asiento asiento = new Asiento();
                    String z;
                    z = unidad.getText() + numAEspecial.getText();
                    asiento.setCodigoAsiento(z);
                    asiento.setNumeroAsiento(Integer.parseInt(numAEspecial.getText()));
                    asiento.setNumeroUnidad(unidad.getText());
                    asiento.setCodBoleto(codigo.getText());
                    asiento.setTipoAsiento("especial");
                    IFachadaAsiento asientos = new ListadoAsientos();
                    try {
                        asientos.agrega(asiento);
                        agrAsientoEspecial();
                        JOptionPane.showMessageDialog(null, "Asiento vendido");
                    } catch (FachadaException fe) {
                        JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El asiento pedido es mayor a la capacidad de la unidad");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrse el nÃºmero del asiento");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese el cÃ³digo del boleto");
        }
        numAEspecial.setText("");
}//GEN-LAST:event_agregarAsientoEspecialActionPerformed
    private void agrAsientoNormal() {
        if (!codigo.getText().equals("")) {
            codigo.setEnabled(false);
            cliente.setEnabled(false);
            ruta.setEnabled(false);
            buscado = null;
            Unidad unidad1 = new Unidad();
            unidad1.setCodigoUnidad(unidad.getText());
            try {
                buscado = listaUnidades.obten(unidad1);
            } catch (FachadaException fe) {
                JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
            }
            if (buscado.getDisponibles() != 0) {
                buscado.setDisponibles(buscado.getDisponibles() - 1);
                cantADisponibles.setText(String.valueOf(buscado.getDisponibles()));
                try {
                    listaUnidades.actualiza(buscado);
                    int a = buscado.getCapacidadUnidad() - buscado.getDisponibles();
                    detalleAsientosNormales.setText(detalleAsientosNormales.getText() + "-" + numANormal.getText());
                    int aNormales;
                    aNormales = Integer.parseInt(asientosNormales.getText()) + 1;
                    asientosNormales.setText(String.valueOf(aNormales));
                    float precio;
                    precio = Float.parseFloat(costoTotal.getText());
                    precio = precio + costoUnidad;
                    costoTotal.setText(String.valueOf(precio));
                } catch (FachadaException fe) {
                    JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error: La unidad la estÃ¡ llena");
            }
        }
    }

    private void agrAsientoEspecial() {
        if (!codigo.getText().equals("")) {
            codigo.setEnabled(false);
            cliente.setEnabled(false);
            ruta.setEnabled(false);
            buscado = null;
            Unidad unidad1 = new Unidad();
            unidad1.setCodigoUnidad(unidad.getText());
            try {
                buscado = listaUnidades.obten(unidad1);
            } catch (FachadaException fe) {
                JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
            }
            if (buscado.getDisponibles() != 0) {
                buscado.setDisponibles(buscado.getDisponibles() - 1);
                cantADisponibles.setText(String.valueOf(buscado.getDisponibles()));
                try {
                    listaUnidades.actualiza(buscado);
                    detalleAsientosEspeciales.setText(detalleAsientosEspeciales.getText() + "-" + numAEspecial.getText());
                    int aEspeciales;
                    aEspeciales = Integer.parseInt(asientosEspeciales.getText()) + 1;
                    asientosEspeciales.setText(String.valueOf(aEspeciales));
                    float precio;
                    precio = Float.parseFloat(costoTotal.getText());
                    precio = precio + (costoUnidad / 2);
                    costoTotal.setText(String.valueOf(precio));
                } catch (FachadaException fe) {
                    JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error: La unidad la estÃ¡ llena");
            }
        }
    }
    private void agregarAsientoNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarAsientoNormalActionPerformed
        // TODO add your handling code here:
        if (!codigo.getText().equals("")) {
            if (!numANormal.getText().equals("")) {
                if (Integer.parseInt(numANormal.getText()) <= capUnidad) {
                    Asiento asiento = new Asiento();
                    String z;
                    z = unidad.getText() + numANormal.getText();
                    asiento.setCodigoAsiento(z);
                    asiento.setNumeroAsiento(Integer.parseInt(numANormal.getText()));
                    asiento.setNumeroUnidad(unidad.getText());
                    asiento.setCodBoleto(codigo.getText());
                    asiento.setTipoAsiento("normal");
                    IFachadaAsiento asientos = new ListadoAsientos();
                    try {
                        asientos.agrega(asiento);
                        agrAsientoNormal();
                        JOptionPane.showMessageDialog(null, "Asiento vendido");
                    } catch (FachadaException fe) {
                        JOptionPane.showMessageDialog(null, "Error: " + fe.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El asiento pedido es mayor a la capacidad de la unidad");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrse el nÃºmero del asiento");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese el cÃ³digo del boleto");
        }
        numANormal.setText("");
}//GEN-LAST:event_agregarAsientoNormalActionPerformed

    private void numANormalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numANormalKeyTyped
        // TODO add your handling code here:
        NumeroInt.Validar(evt);
        NumeroInt.numeroCaracteres(numANormal, 2, evt);
    }//GEN-LAST:event_numANormalKeyTyped

    private void numAEspecialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numAEspecialKeyTyped
        // TODO add your handling code here:
        NumeroInt.Validar(evt);
        NumeroInt.numeroCaracteres(numAEspecial, 2, evt);
    }//GEN-LAST:event_numAEspecialKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptar;
    private javax.swing.JButton agregarAsientoEspecial;
    private javax.swing.JButton agregarAsientoNormal;
    private javax.swing.JLabel asientosEspeciales;
    private javax.swing.JLabel asientosNormales;
    private javax.swing.JButton cancelar;
    private javax.swing.JLabel cantADisponibles;
    private javax.swing.JComboBox cliente;
    private javax.swing.JTextField codigo;
    private javax.swing.JLabel costoTotal;
    private javax.swing.JLabel detalleAsientosEspeciales;
    private javax.swing.JLabel detalleAsientosNormales;
    private javax.swing.JLabel fechaViaje;
    private javax.swing.JLabel horaViaje;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField numAEspecial;
    private javax.swing.JTextField numANormal;
    private javax.swing.JComboBox ruta;
    private javax.swing.JLabel unidad;
    // End of variables declaration//GEN-END:variables
}
